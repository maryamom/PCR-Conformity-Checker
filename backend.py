api_key="ta_cl√©"

import hashlib
from docx import Document
from docx.oxml.table import CT_Tbl
from docx.oxml.text.paragraph import CT_P
from docx.table import Table
from docx.text.paragraph import Paragraph
import os
import json
import time
from together import Together

def iter_block_items(parent):
    for child in parent.element.body:
        if isinstance(child, CT_P):
            yield Paragraph(child, parent)
        elif isinstance(child, CT_Tbl):
            yield Table(child, parent)

def get_table_paragraph_context_with_data(docx_path):
    doc = Document(docx_path)
    blocks = list(iter_block_items(doc))
    result = []
    last_para = None

    for block in blocks:
        if isinstance(block, Paragraph):
            if block.text.strip():
                last_para = block.text.strip()
        elif isinstance(block, Table):
            table = block
            rows = table.rows
            if not rows:
                continue

            headers = [cell.text.strip().lower().replace('\n', ' ') for cell in rows[0].cells]
            headers = [h for h in headers if h]
            champs = []
            for row in rows[1:]:
                champ = {headers[i]: cell.text.strip() for i, cell in enumerate(row.cells) if i < len(headers)}
                champs.append(champ)
            result.append({
                "context_paragraph": last_para,
                "table_data": champs,
                "block_index": len(result)
            })
    return result







client = Together(api_key=api_key)
MODEL_NAME = "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8"


def build_prompt_json_ready(block_json):
    block_index = block_json.get("block_index", -1)
    instruction = f"""
Tu es un assistant intelligent charg√© d'analyser un bloc issu d‚Äôun document de sp√©cifications.

Ce bloc contient¬†:
- Un paragraphe d‚Äôintroduction (`context_paragraph`) d√©crivant le contexte du tableau.
- Un tableau structur√© (`table_data`) contenant des informations techniques sous forme de lignes, avec des champs tels que "champ", "format attendu", "contraintes suppl√©mentaires", etc.
- Un identifiant de bloc (`block_index`).

---

üéØ **Ton objectif** :
D√©tecter un **pr√©fixe attendu** pour ce bloc.  
UN PR√âFIXE EXISTE TOUJOURS, M√äME S‚ÄôIL EST IMPLICITE.

Un pr√©fixe est une suite de lettres ou chiffres (souvent 2 √† 5 caract√®res) utilis√©e comme d√©but standardis√© d‚Äôun identifiant ou d‚Äôun champ. Il peut √™tre :
- clairement mentionn√© (explicite)
- d√©duit du format ou d‚Äôun motif r√©p√©t√© dans les champs (implicite)

M√™me si le pr√©fixe n‚Äôest pas formul√© directement dans les textes, tu dois en **d√©duire le plus probable**, bas√© sur les exemples donn√©s.

üö´ Tu ne dois JAMAIS r√©pondre `null` : d√©duis toujours un pr√©fixe probable √† partir des indices visibles.
---
üìå **O√π peut-on trouver un pr√©fixe ?**
- Dans le `context_paragraph`, par exemple :
  - "Le pr√©fixe attendu est ABC"
  - "Chaque identifiant commence par AZE"
  - Sous format d'un mot isol√© par exemple "04T"
- Dans le `table_data`, par exemple dans les colonnes :
  - "Format attendu" : "CBE + 8 chiffres"
  - "Contraintes suppl√©mentaires" : "doit commencer par CLT001"
  - ou IMPLICITEMENT !! 

‚úÖ **Exemples valides de pr√©fixes** :
- `CBE`
- `AZE`
- `032`
- `CLT001`
- `PRD`

üß† Exemple implicite :  
Si dans la colonne `"format attendu"` tu vois `"023 + 15 chiffres"`, alors le pr√©fixe attendu est `"023"`.

‚ùóTu dois r√©pondre UNIQUEMENT avec le JSON demand√©, sans aucune explication ni phrase en dehors du bloc JSON.
üîí La r√©ponse doit √™tre strictement :
- au format JSON valide
- sans texte avant ou apr√®s
- sans Markdown (` ```json ` etc.)

üì§ **Format de r√©ponse strictement attendu (JSON uniquement)** :
{{
  "block_index": {block_index},
  "prefixe_detecte": "..."
}}

Voici le bloc √† analyser :
{json.dumps(block_json, indent=2, ensure_ascii=False)}
"""
    return instruction.strip()



#  Fonction de d√©tection via LLaMA

def detect_prefix_llama_direct(block):
    prompt = build_prompt_json_ready(block)
    response_text = ""
    try:
        response = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[{"role": "user", "content": prompt}],
        )
        response_text = response.choices[0].message.content.strip()
        print(f"{block['block_index']}:\n{response_text}")
        return json.loads(response_text)
    except Exception as e:
     print(f"‚ùå Erreur de parsing pour bloc {block.get('block_index')}: {e}")
     return {
         "block_index": block.get("block_index", -1),
         "prefixe_detecte": "UNKNOWN",  # Jamais None
         "error": str(e),
         "raw_response": response_text
    }







def run_prefix_detection_on_doc(docx_path):
    blocks = get_table_paragraph_context_with_data(docx_path)
    results = []
    for block in blocks:
        result = detect_prefix_llama_direct(block)
        prefix = result.get("prefixe_detecte")

        # Format final simplifi√© pour la suite du pipeline

        results.append({
            "prefixe_detecte": prefix,
            "table_data": block.get("table_data", []),
            "block_index": block.get("block_index", -1)
        })
        time.sleep(3)
    return results





def extract_pcr_lines(txt_path):
    with open(txt_path, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def match_pcr_lines_to_blocks_by_prefix(blocks_with_prefixes, txt_path):
    #blocks_with_prefixes = get_cached_prefix_detection(docx_path)
    pcr_lines = extract_pcr_lines(txt_path)
    matched_lines = []
    for i, line in enumerate(pcr_lines):
        for block in blocks_with_prefixes:
            prefix = block.get("prefixe_detecte")
            if prefix and line.startswith(prefix):
                matched_lines.append({
                    "line_index": i,
                    "line": line,
                    "matched_block": block
                })
                break #d√©s qu'un bloc matche , on passe √† la ligne suivante
        else:
            matched_lines.append({
                "line_index": i,
                "line": line,
                "matched_block_index": None
            })
    return matched_lines

def build_conformity_prompt(line, matched_block):
    return f"""
Tu es un assistant intelligent et rigoureux charg√© de v√©rifier la conformit√© d‚Äôune ligne issue d‚Äôun fichier de Transactions PCR (Plan de Contr√¥le de R√©f√©rence) avec les sp√©cifications fournies.

---
Voici la ligne √† analyser et ses sp√©cifications :

Informations disponibles :  
- Ligne PCR √† analyser :  
\"{line}\"

- Sp√©cifications du bloc associ√© :  
{json.dumps(matched_block["table_data"], indent=2, ensure_ascii=False)}

---

Ta mission est de :
1. V√©rifier que tous les champs list√©s dans les sp√©cifications sont pr√©sents dans la ligne PCR.

2. Pour chaque champ, contr√¥ler que la valeur extraite respecte strictement les sp√©cifications (type, longueur, pr√©fixe, contraintes, etc.).

3. V√©rifier que l‚Äôordre des champs dans la ligne PCR correspond exactement √† l‚Äôordre d√©fini dans les sp√©cifications.

4. Si l‚Äôordre est incorrect, proposer l‚Äôordre corrig√© sous forme d‚Äôune liste ordonn√©e des noms des champs.

5. Proposer une suggestion de ligne PCR corrig√©e qui respecte √† la fois l‚Äôordre, les longueurs, et les contraintes.

---

Consignes importantes :
- Ta r√©ponse doit √™tre strictement un objet JSON au format suivant, sans aucun texte ni explication suppl√©mentaire.
- Utilise les cl√©s exactes suivantes :
  - "line" : la ligne PCR analys√©e (cha√Æne de caract√®res)
  - "conforme" : "oui" ou "non", selon la conformit√© globale de la ligne

  - "champs" : une liste d‚Äôobjets, un par champ, contenant :  
    - "nom" : nom du champ (ex: "Code Partenaire")  
    - "valeur" : valeur extraite du champ dans la ligne PCR  
    - "conforme" : "oui" ou "non"  
    - "erreur" : description pr√©cise de l‚Äôerreur (ou null si conforme)  
    - "longueur_attendue" : nombre entier (longueur attendue du champ)


  - Objet "ordre_champs" : 
  . V√©rifie si l‚Äôordre des champs dans la ligne PCR correspond exactement √† l‚Äôordre d√©fini dans les sp√©cifications.

   - Compare la position des champs dans la ligne par rapport √† l‚Äôordre attendu indiqu√© dans le tableau des sp√©cifications.
   - Si l‚Äôordre est exactement le m√™me, indique `"conforme": "oui"`.

   - Si l‚Äôordre est diff√©rent, indique `"conforme": "non"` et fournis obligatoirement :
     - `"ordre_attendu"` : liste ordonn√©e des noms des champs selon les sp√©cifications.
     - `"ordre_lu"` : liste ordonn√©e des noms des champs tels qu‚Äôils apparaissent dans la ligne PCR.
     - `"suggestion_ordre_corrige"` : liste ordonn√©e des noms des champs dans le bon ordre.

   ‚ö†Ô∏è Tr√®s important :
   - Ne JAMAIS inclure `"suggestion_ordre_corrige"` si `"conforme"` est `"oui"`.
   - Inclure `"suggestion_ordre_corrige"` uniquement quand l‚Äôordre des champs est incorrect.

    voila  un Exemple ne g√©n√©ralise pas √ßa!!!
    JSON attendu pour "ordre_champs" :

    "ordre_champs": {{
    "conforme": "non",
    "ordre_attendu": ["Champ 1", "Champ 2", "Champ 3"],
    "ordre_lu": ["Champ 2", "Champ 1", "Champ 3"],
    "suggestion_ordre_corrige": ["Champ 1", "Champ 2", "Champ 3"]
    }}

    Et si l'ordre est correct :


    "ordre_champs": {{
    "conforme": "oui",
    "ordre_attendu": ["Champ 1", "Champ 2", "Champ 3"],
    "ordre_lu": ["Champ 1", "Champ 2", "Champ 3"]
    }}



  - objet "ligne_corrigee" : cha√Æne de caract√®res correspondant √† la ligne PCR corrig√©e

Sois pr√©cis, rigoureux et concis dans ta r√©ponse JSON.


"""

def verify_conformity_with_llm(blocks_with_prefixes, txt_path):
    client = Together(api_key=api_key)
    matched = match_pcr_lines_to_blocks_by_prefix(blocks_with_prefixes, txt_path)
    results = []
    for line_obj in matched:
        line = line_obj["line"]
        matched_block = line_obj.get("matched_block")
        if not matched_block:
            results.append({
                "line": line,
                "conforme": False,
                "erreurs": ["Aucun bloc associ√© √† cette ligne."],
                "debug": {
                    #"prefixes_detectes": [b.get("prefixe_detecte") for b in run_prefix_detection_on_doc (docx_path)],
                    "ligne_originale": line,
                    "ligne_sans_espaces": line.strip().replace(" ", "")
                }
            })
            continue
        prompt = build_conformity_prompt(line, matched_block)
        try:
            response = client.chat.completions.create(
                model="mistralai/Mixtral-8x7B-Instruct-v0.1",
                messages=[{"role": "user", "content": prompt}]
            )
            response_text = response.choices[0].message.content.strip()
            try:
                result = json.loads(response_text)
            except json.JSONDecodeError:
                result = {
                    "line": line,
                    "conforme": False,
                    "erreurs": ["R√©ponse JSON invalide du LLM."],
                    "raw_response": response_text
                }
            results.append(result)
        except Exception as e:
            results.append({
                "line": line,
                "conforme": False,
                "erreurs": [f"Erreur LLM : {str(e)}"]
            })
        time.sleep(2)
    return results
